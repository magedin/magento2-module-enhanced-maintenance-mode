<?php
/**
 * MagedIn Technology
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category  MagedIn
 * @copyright Copyright (c) 2022 MagedIn Technology.
 *
 * @author    MagedIn Support <support@magedin.com>
 */

declare(strict_types=1);

namespace MagedIn\EnhancedMaintenanceMode\Console\Command;

use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Store\Model\StoreManagerInterface;

class ScopeProvider
{
    const SCOPE_WEBSITE = 'website';
    const SCOPE_STORE = 'store';

    /**
     * @var string|null
     */
    private $scope = self::SCOPE_WEBSITE;

    /**
     * @var string|null
     */
    private $code = null;

    /**
     * @var StoreManagerInterface
     */
    private $storeManager;

    /**
     * @param StoreManagerInterface $storeManager
     */
    public function __construct(
        StoreManagerInterface $storeManager
    ) {
        $this->storeManager = $storeManager;
    }

    /**
     * @param string $website
     * @return $this
     * @throws LocalizedException
     * @throws NoSuchEntityException
     */
    public function setScopeWebsite(string $website): self
    {
        $this->validateScope(self::SCOPE_WEBSITE, $website);
        $this->scope = self::SCOPE_WEBSITE;
        $this->code = $website;
        return $this;
    }

    /**
     * @param string $store
     * @return $this
     * @throws LocalizedException
     * @throws NoSuchEntityException
     */
    public function setScopeStore(string $store): self
    {
        $this->validateScope(self::SCOPE_STORE, $store);
        $this->scope = self::SCOPE_STORE;
        $this->code = $store;
        return $this;
    }

    /**
     * @return bool
     */
    public function isScopeWebsite(): bool
    {
        return $this->scope === self::SCOPE_WEBSITE;
    }

    /**
     * @return bool
     */
    public function isScopeStore(): bool
    {
        return $this->scope === self::SCOPE_STORE;
    }

    /**
     * @return string
     */
    public function getScope(): string
    {
        return (string) $this->scope;
    }

    /**
     * @return string
     */
    public function getCode(): string
    {
        return (string) $this->code;
    }

    /**
     * @param string $scopeType
     * @param string $scopeCode
     * @return bool
     * @throws LocalizedException
     * @throws NoSuchEntityException
     */
    private function validateScope(string $scopeType, string $scopeCode): bool
    {
        if ($scopeType === self::SCOPE_WEBSITE) {
            $this->storeManager->getWebsite($scopeCode)->getCode();
        } elseif ($scopeType === self::SCOPE_STORE) {
            $this->storeManager->getStore($scopeCode)->getCode();
        }
        return true;
    }
}
